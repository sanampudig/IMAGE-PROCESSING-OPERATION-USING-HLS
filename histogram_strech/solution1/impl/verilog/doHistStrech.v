// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doHistStrech,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.328000,HLS_SYN_LAT=76834,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=2130,HLS_SYN_LUT=3148,HLS_VERSION=2018_3}" *)

module doHistStrech (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state36 = 9'd256;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [0:0] inStream_TKEEP;
input  [0:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [7:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [0:0] outStream_TKEEP;
output  [0:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [7:0] inStream_V_data_V_0_payload_A;
reg   [7:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [0:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [0:0] inStream_V_keep_V_0_payload_A;
reg   [0:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [0:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [0:0] inStream_V_strb_V_0_payload_A;
reg   [0:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [7:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [7:0] outStream_V_data_V_1_payload_A;
reg   [7:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [0:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [0:0] outStream_V_keep_V_1_payload_A;
reg   [0:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [0:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [0:0] outStream_V_strb_V_1_payload_A;
reg   [0:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [7:0] xMin;
wire   [7:0] xMax;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond_fu_205_p2;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] exitcond_reg_404;
reg   [0:0] exitcond_reg_404_pp0_iter25_reg;
reg    ap_enable_reg_pp0_iter27;
reg   [0:0] exitcond_reg_404_pp0_iter26_reg;
reg   [16:0] idxPixel_reg_165;
reg   [7:0] xMax_read_reg_379;
reg   [7:0] xMin_read_reg_384;
wire   [8:0] tmp_cast_fu_188_p1;
reg   [8:0] tmp_cast_reg_389;
wire    ap_CS_fsm_state2;
wire  signed [31:0] xMax_minus_xMin6_fu_200_p1;
wire   [31:0] grp_fu_185_p1;
reg   [31:0] xMax_minus_xMin_reg_399;
wire    ap_CS_fsm_state7;
reg    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state16_pp0_stage0_iter8;
wire    ap_block_state17_pp0_stage0_iter9;
wire    ap_block_state18_pp0_stage0_iter10;
wire    ap_block_state19_pp0_stage0_iter11;
wire    ap_block_state20_pp0_stage0_iter12;
wire    ap_block_state21_pp0_stage0_iter13;
wire    ap_block_state22_pp0_stage0_iter14;
wire    ap_block_state23_pp0_stage0_iter15;
wire    ap_block_state24_pp0_stage0_iter16;
wire    ap_block_state25_pp0_stage0_iter17;
wire    ap_block_state26_pp0_stage0_iter18;
wire    ap_block_state27_pp0_stage0_iter19;
wire    ap_block_state28_pp0_stage0_iter20;
wire    ap_block_state29_pp0_stage0_iter21;
wire    ap_block_state30_pp0_stage0_iter22;
wire    ap_block_state31_pp0_stage0_iter23;
wire    ap_block_state32_pp0_stage0_iter24;
wire    ap_block_state33_pp0_stage0_iter25;
wire    ap_block_state34_pp0_stage0_iter26;
reg    ap_block_state34_io;
wire    ap_block_state35_pp0_stage0_iter27;
reg    ap_block_state35_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_404_pp0_iter1_reg;
reg   [0:0] exitcond_reg_404_pp0_iter2_reg;
reg   [0:0] exitcond_reg_404_pp0_iter3_reg;
reg   [0:0] exitcond_reg_404_pp0_iter4_reg;
reg   [0:0] exitcond_reg_404_pp0_iter5_reg;
reg   [0:0] exitcond_reg_404_pp0_iter6_reg;
reg   [0:0] exitcond_reg_404_pp0_iter7_reg;
reg   [0:0] exitcond_reg_404_pp0_iter8_reg;
reg   [0:0] exitcond_reg_404_pp0_iter9_reg;
reg   [0:0] exitcond_reg_404_pp0_iter10_reg;
reg   [0:0] exitcond_reg_404_pp0_iter11_reg;
reg   [0:0] exitcond_reg_404_pp0_iter12_reg;
reg   [0:0] exitcond_reg_404_pp0_iter13_reg;
reg   [0:0] exitcond_reg_404_pp0_iter14_reg;
reg   [0:0] exitcond_reg_404_pp0_iter15_reg;
reg   [0:0] exitcond_reg_404_pp0_iter16_reg;
reg   [0:0] exitcond_reg_404_pp0_iter17_reg;
reg   [0:0] exitcond_reg_404_pp0_iter18_reg;
reg   [0:0] exitcond_reg_404_pp0_iter19_reg;
reg   [0:0] exitcond_reg_404_pp0_iter20_reg;
reg   [0:0] exitcond_reg_404_pp0_iter21_reg;
reg   [0:0] exitcond_reg_404_pp0_iter22_reg;
reg   [0:0] exitcond_reg_404_pp0_iter23_reg;
reg   [0:0] exitcond_reg_404_pp0_iter24_reg;
wire   [16:0] idxPixel_1_fu_211_p2;
reg   [0:0] tmp_keep_V_reg_413;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter1_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter2_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter3_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter4_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter5_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter6_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter7_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter8_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter9_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter10_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter11_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter12_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter13_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter14_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter15_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter16_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter17_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter18_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter19_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter20_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter21_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter22_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter23_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter24_reg;
reg   [0:0] tmp_keep_V_reg_413_pp0_iter25_reg;
reg   [0:0] tmp_strb_V_reg_418;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter1_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter2_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter3_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter4_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter5_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter6_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter7_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter8_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter9_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter10_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter11_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter12_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter13_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter14_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter15_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter16_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter17_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter18_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter19_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter20_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter21_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter22_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter23_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter24_reg;
reg   [0:0] tmp_strb_V_reg_418_pp0_iter25_reg;
reg   [1:0] tmp_user_V_reg_423;
reg   [1:0] tmp_user_V_reg_423_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter2_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter3_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter4_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter5_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter6_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter7_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter8_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter9_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter10_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter11_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter12_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter13_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter14_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter15_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter16_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter17_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter18_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter19_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter20_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter21_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter22_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter23_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter24_reg;
reg   [1:0] tmp_user_V_reg_423_pp0_iter25_reg;
reg   [0:0] tmp_last_V_reg_428;
reg   [0:0] tmp_last_V_reg_428_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter4_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter5_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter6_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter7_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter8_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter9_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter10_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter11_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter12_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter13_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter14_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter15_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter16_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter17_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter18_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter19_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter20_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter21_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter22_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter23_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter24_reg;
reg   [0:0] tmp_last_V_reg_428_pp0_iter25_reg;
reg   [4:0] tmp_id_V_reg_433;
reg   [4:0] tmp_id_V_reg_433_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter2_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter3_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter4_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter5_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter6_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter7_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter8_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter9_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter10_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter11_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter12_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter13_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter14_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter15_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter16_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter17_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter18_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter19_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter20_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter21_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter22_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter23_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter24_reg;
reg   [4:0] tmp_id_V_reg_433_pp0_iter25_reg;
reg   [5:0] tmp_dest_V_reg_438;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter2_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter3_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter4_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter5_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter6_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter7_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter8_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter9_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter10_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter11_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter12_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter13_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter14_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter15_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter16_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter17_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter18_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter19_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter20_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter21_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter22_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter23_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter24_reg;
reg   [5:0] tmp_dest_V_reg_438_pp0_iter25_reg;
wire  signed [31:0] tmp_s_fu_254_p1;
reg   [31:0] tmp_5_reg_448;
reg    ap_enable_reg_pp0_iter5;
wire   [31:0] grp_fu_181_p2;
reg   [31:0] tmp_6_reg_453;
reg   [7:0] tmp_V_reg_458;
wire   [22:0] tmp_V_1_fu_273_p1;
reg   [22:0] tmp_V_1_reg_464;
wire   [7:0] val_V_fu_370_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_block_pp0_stage0_01001;
reg  signed [31:0] grp_fu_185_p0;
wire   [8:0] tmp_cast_6_fu_191_p1;
wire   [8:0] tmp_1_fu_194_p2;
wire   [8:0] tmp_3_cast_fu_245_p1;
wire   [8:0] tmp_4_fu_249_p2;
wire   [31:0] grp_fu_176_p2;
wire   [31:0] p_Val2_s_fu_259_p1;
wire   [24:0] mantissa_V_fu_277_p4;
wire   [8:0] tmp_i_i_i_i_cast1_fu_290_p1;
wire   [8:0] sh_assign_fu_293_p2;
wire   [7:0] tmp_i_i_i_fu_307_p2;
wire   [0:0] isNeg_fu_299_p3;
wire  signed [8:0] tmp_i_i_i_cast_fu_312_p1;
wire  signed [8:0] ush_fu_316_p3;
wire  signed [31:0] sh_assign_2_cast_fu_324_p1;
wire  signed [24:0] sh_assign_2_cast_cas_fu_328_p1;
wire   [54:0] mantissa_V_1_cast2_fu_286_p1;
wire   [54:0] tmp_1_i_i_i_fu_332_p1;
wire   [24:0] r_V_fu_336_p2;
wire   [0:0] tmp_9_fu_348_p3;
wire   [54:0] r_V_1_fu_342_p2;
wire   [7:0] tmp_fu_356_p1;
wire   [7:0] tmp_3_fu_360_p4;
reg    grp_fu_176_ce;
reg    grp_fu_181_ce;
reg    grp_fu_185_ce;
wire    ap_CS_fsm_state36;
reg    ap_block_state36;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

doHistStrech_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doHistStrech_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .xMin(xMin),
    .xMax(xMax)
);

doHistStrech_fmulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doHistStrech_fmulbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_453),
    .din1(32'd1132396544),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

doHistStrech_fdivcud #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doHistStrech_fdivcud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_5_reg_448),
    .din1(xMax_minus_xMin_reg_399),
    .ce(grp_fu_181_ce),
    .dout(grp_fu_181_p2)
);

doHistStrech_sitodEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doHistStrech_sitodEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_185_p0),
    .ce(grp_fu_185_ce),
    .dout(grp_fu_185_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_out == 1'b1) & (inStream_V_last_V_0_vld_out == 1'b1))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_in == 1'b1) & (inStream_V_last_V_0_vld_in == 1'b1))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd2;
        end else if ((((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd1;
        end else if (((~((inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)) & ~((inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)) & (inStream_V_last_V_0_state == 2'd3)) | ((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b1)) | ((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd3;
        end else begin
            inStream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idxPixel_reg_165 <= idxPixel_1_fu_211_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        idxPixel_reg_165 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_404 <= exitcond_fu_205_p2;
        exitcond_reg_404_pp0_iter1_reg <= exitcond_reg_404;
        tmp_dest_V_reg_438_pp0_iter1_reg <= tmp_dest_V_reg_438;
        tmp_id_V_reg_433_pp0_iter1_reg <= tmp_id_V_reg_433;
        tmp_keep_V_reg_413_pp0_iter1_reg <= tmp_keep_V_reg_413;
        tmp_last_V_reg_428_pp0_iter1_reg <= tmp_last_V_reg_428;
        tmp_strb_V_reg_418_pp0_iter1_reg <= tmp_strb_V_reg_418;
        tmp_user_V_reg_423_pp0_iter1_reg <= tmp_user_V_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_reg_404_pp0_iter10_reg <= exitcond_reg_404_pp0_iter9_reg;
        exitcond_reg_404_pp0_iter11_reg <= exitcond_reg_404_pp0_iter10_reg;
        exitcond_reg_404_pp0_iter12_reg <= exitcond_reg_404_pp0_iter11_reg;
        exitcond_reg_404_pp0_iter13_reg <= exitcond_reg_404_pp0_iter12_reg;
        exitcond_reg_404_pp0_iter14_reg <= exitcond_reg_404_pp0_iter13_reg;
        exitcond_reg_404_pp0_iter15_reg <= exitcond_reg_404_pp0_iter14_reg;
        exitcond_reg_404_pp0_iter16_reg <= exitcond_reg_404_pp0_iter15_reg;
        exitcond_reg_404_pp0_iter17_reg <= exitcond_reg_404_pp0_iter16_reg;
        exitcond_reg_404_pp0_iter18_reg <= exitcond_reg_404_pp0_iter17_reg;
        exitcond_reg_404_pp0_iter19_reg <= exitcond_reg_404_pp0_iter18_reg;
        exitcond_reg_404_pp0_iter20_reg <= exitcond_reg_404_pp0_iter19_reg;
        exitcond_reg_404_pp0_iter21_reg <= exitcond_reg_404_pp0_iter20_reg;
        exitcond_reg_404_pp0_iter22_reg <= exitcond_reg_404_pp0_iter21_reg;
        exitcond_reg_404_pp0_iter23_reg <= exitcond_reg_404_pp0_iter22_reg;
        exitcond_reg_404_pp0_iter24_reg <= exitcond_reg_404_pp0_iter23_reg;
        exitcond_reg_404_pp0_iter25_reg <= exitcond_reg_404_pp0_iter24_reg;
        exitcond_reg_404_pp0_iter26_reg <= exitcond_reg_404_pp0_iter25_reg;
        exitcond_reg_404_pp0_iter2_reg <= exitcond_reg_404_pp0_iter1_reg;
        exitcond_reg_404_pp0_iter3_reg <= exitcond_reg_404_pp0_iter2_reg;
        exitcond_reg_404_pp0_iter4_reg <= exitcond_reg_404_pp0_iter3_reg;
        exitcond_reg_404_pp0_iter5_reg <= exitcond_reg_404_pp0_iter4_reg;
        exitcond_reg_404_pp0_iter6_reg <= exitcond_reg_404_pp0_iter5_reg;
        exitcond_reg_404_pp0_iter7_reg <= exitcond_reg_404_pp0_iter6_reg;
        exitcond_reg_404_pp0_iter8_reg <= exitcond_reg_404_pp0_iter7_reg;
        exitcond_reg_404_pp0_iter9_reg <= exitcond_reg_404_pp0_iter8_reg;
        tmp_dest_V_reg_438_pp0_iter10_reg <= tmp_dest_V_reg_438_pp0_iter9_reg;
        tmp_dest_V_reg_438_pp0_iter11_reg <= tmp_dest_V_reg_438_pp0_iter10_reg;
        tmp_dest_V_reg_438_pp0_iter12_reg <= tmp_dest_V_reg_438_pp0_iter11_reg;
        tmp_dest_V_reg_438_pp0_iter13_reg <= tmp_dest_V_reg_438_pp0_iter12_reg;
        tmp_dest_V_reg_438_pp0_iter14_reg <= tmp_dest_V_reg_438_pp0_iter13_reg;
        tmp_dest_V_reg_438_pp0_iter15_reg <= tmp_dest_V_reg_438_pp0_iter14_reg;
        tmp_dest_V_reg_438_pp0_iter16_reg <= tmp_dest_V_reg_438_pp0_iter15_reg;
        tmp_dest_V_reg_438_pp0_iter17_reg <= tmp_dest_V_reg_438_pp0_iter16_reg;
        tmp_dest_V_reg_438_pp0_iter18_reg <= tmp_dest_V_reg_438_pp0_iter17_reg;
        tmp_dest_V_reg_438_pp0_iter19_reg <= tmp_dest_V_reg_438_pp0_iter18_reg;
        tmp_dest_V_reg_438_pp0_iter20_reg <= tmp_dest_V_reg_438_pp0_iter19_reg;
        tmp_dest_V_reg_438_pp0_iter21_reg <= tmp_dest_V_reg_438_pp0_iter20_reg;
        tmp_dest_V_reg_438_pp0_iter22_reg <= tmp_dest_V_reg_438_pp0_iter21_reg;
        tmp_dest_V_reg_438_pp0_iter23_reg <= tmp_dest_V_reg_438_pp0_iter22_reg;
        tmp_dest_V_reg_438_pp0_iter24_reg <= tmp_dest_V_reg_438_pp0_iter23_reg;
        tmp_dest_V_reg_438_pp0_iter25_reg <= tmp_dest_V_reg_438_pp0_iter24_reg;
        tmp_dest_V_reg_438_pp0_iter2_reg <= tmp_dest_V_reg_438_pp0_iter1_reg;
        tmp_dest_V_reg_438_pp0_iter3_reg <= tmp_dest_V_reg_438_pp0_iter2_reg;
        tmp_dest_V_reg_438_pp0_iter4_reg <= tmp_dest_V_reg_438_pp0_iter3_reg;
        tmp_dest_V_reg_438_pp0_iter5_reg <= tmp_dest_V_reg_438_pp0_iter4_reg;
        tmp_dest_V_reg_438_pp0_iter6_reg <= tmp_dest_V_reg_438_pp0_iter5_reg;
        tmp_dest_V_reg_438_pp0_iter7_reg <= tmp_dest_V_reg_438_pp0_iter6_reg;
        tmp_dest_V_reg_438_pp0_iter8_reg <= tmp_dest_V_reg_438_pp0_iter7_reg;
        tmp_dest_V_reg_438_pp0_iter9_reg <= tmp_dest_V_reg_438_pp0_iter8_reg;
        tmp_id_V_reg_433_pp0_iter10_reg <= tmp_id_V_reg_433_pp0_iter9_reg;
        tmp_id_V_reg_433_pp0_iter11_reg <= tmp_id_V_reg_433_pp0_iter10_reg;
        tmp_id_V_reg_433_pp0_iter12_reg <= tmp_id_V_reg_433_pp0_iter11_reg;
        tmp_id_V_reg_433_pp0_iter13_reg <= tmp_id_V_reg_433_pp0_iter12_reg;
        tmp_id_V_reg_433_pp0_iter14_reg <= tmp_id_V_reg_433_pp0_iter13_reg;
        tmp_id_V_reg_433_pp0_iter15_reg <= tmp_id_V_reg_433_pp0_iter14_reg;
        tmp_id_V_reg_433_pp0_iter16_reg <= tmp_id_V_reg_433_pp0_iter15_reg;
        tmp_id_V_reg_433_pp0_iter17_reg <= tmp_id_V_reg_433_pp0_iter16_reg;
        tmp_id_V_reg_433_pp0_iter18_reg <= tmp_id_V_reg_433_pp0_iter17_reg;
        tmp_id_V_reg_433_pp0_iter19_reg <= tmp_id_V_reg_433_pp0_iter18_reg;
        tmp_id_V_reg_433_pp0_iter20_reg <= tmp_id_V_reg_433_pp0_iter19_reg;
        tmp_id_V_reg_433_pp0_iter21_reg <= tmp_id_V_reg_433_pp0_iter20_reg;
        tmp_id_V_reg_433_pp0_iter22_reg <= tmp_id_V_reg_433_pp0_iter21_reg;
        tmp_id_V_reg_433_pp0_iter23_reg <= tmp_id_V_reg_433_pp0_iter22_reg;
        tmp_id_V_reg_433_pp0_iter24_reg <= tmp_id_V_reg_433_pp0_iter23_reg;
        tmp_id_V_reg_433_pp0_iter25_reg <= tmp_id_V_reg_433_pp0_iter24_reg;
        tmp_id_V_reg_433_pp0_iter2_reg <= tmp_id_V_reg_433_pp0_iter1_reg;
        tmp_id_V_reg_433_pp0_iter3_reg <= tmp_id_V_reg_433_pp0_iter2_reg;
        tmp_id_V_reg_433_pp0_iter4_reg <= tmp_id_V_reg_433_pp0_iter3_reg;
        tmp_id_V_reg_433_pp0_iter5_reg <= tmp_id_V_reg_433_pp0_iter4_reg;
        tmp_id_V_reg_433_pp0_iter6_reg <= tmp_id_V_reg_433_pp0_iter5_reg;
        tmp_id_V_reg_433_pp0_iter7_reg <= tmp_id_V_reg_433_pp0_iter6_reg;
        tmp_id_V_reg_433_pp0_iter8_reg <= tmp_id_V_reg_433_pp0_iter7_reg;
        tmp_id_V_reg_433_pp0_iter9_reg <= tmp_id_V_reg_433_pp0_iter8_reg;
        tmp_keep_V_reg_413_pp0_iter10_reg <= tmp_keep_V_reg_413_pp0_iter9_reg;
        tmp_keep_V_reg_413_pp0_iter11_reg <= tmp_keep_V_reg_413_pp0_iter10_reg;
        tmp_keep_V_reg_413_pp0_iter12_reg <= tmp_keep_V_reg_413_pp0_iter11_reg;
        tmp_keep_V_reg_413_pp0_iter13_reg <= tmp_keep_V_reg_413_pp0_iter12_reg;
        tmp_keep_V_reg_413_pp0_iter14_reg <= tmp_keep_V_reg_413_pp0_iter13_reg;
        tmp_keep_V_reg_413_pp0_iter15_reg <= tmp_keep_V_reg_413_pp0_iter14_reg;
        tmp_keep_V_reg_413_pp0_iter16_reg <= tmp_keep_V_reg_413_pp0_iter15_reg;
        tmp_keep_V_reg_413_pp0_iter17_reg <= tmp_keep_V_reg_413_pp0_iter16_reg;
        tmp_keep_V_reg_413_pp0_iter18_reg <= tmp_keep_V_reg_413_pp0_iter17_reg;
        tmp_keep_V_reg_413_pp0_iter19_reg <= tmp_keep_V_reg_413_pp0_iter18_reg;
        tmp_keep_V_reg_413_pp0_iter20_reg <= tmp_keep_V_reg_413_pp0_iter19_reg;
        tmp_keep_V_reg_413_pp0_iter21_reg <= tmp_keep_V_reg_413_pp0_iter20_reg;
        tmp_keep_V_reg_413_pp0_iter22_reg <= tmp_keep_V_reg_413_pp0_iter21_reg;
        tmp_keep_V_reg_413_pp0_iter23_reg <= tmp_keep_V_reg_413_pp0_iter22_reg;
        tmp_keep_V_reg_413_pp0_iter24_reg <= tmp_keep_V_reg_413_pp0_iter23_reg;
        tmp_keep_V_reg_413_pp0_iter25_reg <= tmp_keep_V_reg_413_pp0_iter24_reg;
        tmp_keep_V_reg_413_pp0_iter2_reg <= tmp_keep_V_reg_413_pp0_iter1_reg;
        tmp_keep_V_reg_413_pp0_iter3_reg <= tmp_keep_V_reg_413_pp0_iter2_reg;
        tmp_keep_V_reg_413_pp0_iter4_reg <= tmp_keep_V_reg_413_pp0_iter3_reg;
        tmp_keep_V_reg_413_pp0_iter5_reg <= tmp_keep_V_reg_413_pp0_iter4_reg;
        tmp_keep_V_reg_413_pp0_iter6_reg <= tmp_keep_V_reg_413_pp0_iter5_reg;
        tmp_keep_V_reg_413_pp0_iter7_reg <= tmp_keep_V_reg_413_pp0_iter6_reg;
        tmp_keep_V_reg_413_pp0_iter8_reg <= tmp_keep_V_reg_413_pp0_iter7_reg;
        tmp_keep_V_reg_413_pp0_iter9_reg <= tmp_keep_V_reg_413_pp0_iter8_reg;
        tmp_last_V_reg_428_pp0_iter10_reg <= tmp_last_V_reg_428_pp0_iter9_reg;
        tmp_last_V_reg_428_pp0_iter11_reg <= tmp_last_V_reg_428_pp0_iter10_reg;
        tmp_last_V_reg_428_pp0_iter12_reg <= tmp_last_V_reg_428_pp0_iter11_reg;
        tmp_last_V_reg_428_pp0_iter13_reg <= tmp_last_V_reg_428_pp0_iter12_reg;
        tmp_last_V_reg_428_pp0_iter14_reg <= tmp_last_V_reg_428_pp0_iter13_reg;
        tmp_last_V_reg_428_pp0_iter15_reg <= tmp_last_V_reg_428_pp0_iter14_reg;
        tmp_last_V_reg_428_pp0_iter16_reg <= tmp_last_V_reg_428_pp0_iter15_reg;
        tmp_last_V_reg_428_pp0_iter17_reg <= tmp_last_V_reg_428_pp0_iter16_reg;
        tmp_last_V_reg_428_pp0_iter18_reg <= tmp_last_V_reg_428_pp0_iter17_reg;
        tmp_last_V_reg_428_pp0_iter19_reg <= tmp_last_V_reg_428_pp0_iter18_reg;
        tmp_last_V_reg_428_pp0_iter20_reg <= tmp_last_V_reg_428_pp0_iter19_reg;
        tmp_last_V_reg_428_pp0_iter21_reg <= tmp_last_V_reg_428_pp0_iter20_reg;
        tmp_last_V_reg_428_pp0_iter22_reg <= tmp_last_V_reg_428_pp0_iter21_reg;
        tmp_last_V_reg_428_pp0_iter23_reg <= tmp_last_V_reg_428_pp0_iter22_reg;
        tmp_last_V_reg_428_pp0_iter24_reg <= tmp_last_V_reg_428_pp0_iter23_reg;
        tmp_last_V_reg_428_pp0_iter25_reg <= tmp_last_V_reg_428_pp0_iter24_reg;
        tmp_last_V_reg_428_pp0_iter2_reg <= tmp_last_V_reg_428_pp0_iter1_reg;
        tmp_last_V_reg_428_pp0_iter3_reg <= tmp_last_V_reg_428_pp0_iter2_reg;
        tmp_last_V_reg_428_pp0_iter4_reg <= tmp_last_V_reg_428_pp0_iter3_reg;
        tmp_last_V_reg_428_pp0_iter5_reg <= tmp_last_V_reg_428_pp0_iter4_reg;
        tmp_last_V_reg_428_pp0_iter6_reg <= tmp_last_V_reg_428_pp0_iter5_reg;
        tmp_last_V_reg_428_pp0_iter7_reg <= tmp_last_V_reg_428_pp0_iter6_reg;
        tmp_last_V_reg_428_pp0_iter8_reg <= tmp_last_V_reg_428_pp0_iter7_reg;
        tmp_last_V_reg_428_pp0_iter9_reg <= tmp_last_V_reg_428_pp0_iter8_reg;
        tmp_strb_V_reg_418_pp0_iter10_reg <= tmp_strb_V_reg_418_pp0_iter9_reg;
        tmp_strb_V_reg_418_pp0_iter11_reg <= tmp_strb_V_reg_418_pp0_iter10_reg;
        tmp_strb_V_reg_418_pp0_iter12_reg <= tmp_strb_V_reg_418_pp0_iter11_reg;
        tmp_strb_V_reg_418_pp0_iter13_reg <= tmp_strb_V_reg_418_pp0_iter12_reg;
        tmp_strb_V_reg_418_pp0_iter14_reg <= tmp_strb_V_reg_418_pp0_iter13_reg;
        tmp_strb_V_reg_418_pp0_iter15_reg <= tmp_strb_V_reg_418_pp0_iter14_reg;
        tmp_strb_V_reg_418_pp0_iter16_reg <= tmp_strb_V_reg_418_pp0_iter15_reg;
        tmp_strb_V_reg_418_pp0_iter17_reg <= tmp_strb_V_reg_418_pp0_iter16_reg;
        tmp_strb_V_reg_418_pp0_iter18_reg <= tmp_strb_V_reg_418_pp0_iter17_reg;
        tmp_strb_V_reg_418_pp0_iter19_reg <= tmp_strb_V_reg_418_pp0_iter18_reg;
        tmp_strb_V_reg_418_pp0_iter20_reg <= tmp_strb_V_reg_418_pp0_iter19_reg;
        tmp_strb_V_reg_418_pp0_iter21_reg <= tmp_strb_V_reg_418_pp0_iter20_reg;
        tmp_strb_V_reg_418_pp0_iter22_reg <= tmp_strb_V_reg_418_pp0_iter21_reg;
        tmp_strb_V_reg_418_pp0_iter23_reg <= tmp_strb_V_reg_418_pp0_iter22_reg;
        tmp_strb_V_reg_418_pp0_iter24_reg <= tmp_strb_V_reg_418_pp0_iter23_reg;
        tmp_strb_V_reg_418_pp0_iter25_reg <= tmp_strb_V_reg_418_pp0_iter24_reg;
        tmp_strb_V_reg_418_pp0_iter2_reg <= tmp_strb_V_reg_418_pp0_iter1_reg;
        tmp_strb_V_reg_418_pp0_iter3_reg <= tmp_strb_V_reg_418_pp0_iter2_reg;
        tmp_strb_V_reg_418_pp0_iter4_reg <= tmp_strb_V_reg_418_pp0_iter3_reg;
        tmp_strb_V_reg_418_pp0_iter5_reg <= tmp_strb_V_reg_418_pp0_iter4_reg;
        tmp_strb_V_reg_418_pp0_iter6_reg <= tmp_strb_V_reg_418_pp0_iter5_reg;
        tmp_strb_V_reg_418_pp0_iter7_reg <= tmp_strb_V_reg_418_pp0_iter6_reg;
        tmp_strb_V_reg_418_pp0_iter8_reg <= tmp_strb_V_reg_418_pp0_iter7_reg;
        tmp_strb_V_reg_418_pp0_iter9_reg <= tmp_strb_V_reg_418_pp0_iter8_reg;
        tmp_user_V_reg_423_pp0_iter10_reg <= tmp_user_V_reg_423_pp0_iter9_reg;
        tmp_user_V_reg_423_pp0_iter11_reg <= tmp_user_V_reg_423_pp0_iter10_reg;
        tmp_user_V_reg_423_pp0_iter12_reg <= tmp_user_V_reg_423_pp0_iter11_reg;
        tmp_user_V_reg_423_pp0_iter13_reg <= tmp_user_V_reg_423_pp0_iter12_reg;
        tmp_user_V_reg_423_pp0_iter14_reg <= tmp_user_V_reg_423_pp0_iter13_reg;
        tmp_user_V_reg_423_pp0_iter15_reg <= tmp_user_V_reg_423_pp0_iter14_reg;
        tmp_user_V_reg_423_pp0_iter16_reg <= tmp_user_V_reg_423_pp0_iter15_reg;
        tmp_user_V_reg_423_pp0_iter17_reg <= tmp_user_V_reg_423_pp0_iter16_reg;
        tmp_user_V_reg_423_pp0_iter18_reg <= tmp_user_V_reg_423_pp0_iter17_reg;
        tmp_user_V_reg_423_pp0_iter19_reg <= tmp_user_V_reg_423_pp0_iter18_reg;
        tmp_user_V_reg_423_pp0_iter20_reg <= tmp_user_V_reg_423_pp0_iter19_reg;
        tmp_user_V_reg_423_pp0_iter21_reg <= tmp_user_V_reg_423_pp0_iter20_reg;
        tmp_user_V_reg_423_pp0_iter22_reg <= tmp_user_V_reg_423_pp0_iter21_reg;
        tmp_user_V_reg_423_pp0_iter23_reg <= tmp_user_V_reg_423_pp0_iter22_reg;
        tmp_user_V_reg_423_pp0_iter24_reg <= tmp_user_V_reg_423_pp0_iter23_reg;
        tmp_user_V_reg_423_pp0_iter25_reg <= tmp_user_V_reg_423_pp0_iter24_reg;
        tmp_user_V_reg_423_pp0_iter2_reg <= tmp_user_V_reg_423_pp0_iter1_reg;
        tmp_user_V_reg_423_pp0_iter3_reg <= tmp_user_V_reg_423_pp0_iter2_reg;
        tmp_user_V_reg_423_pp0_iter4_reg <= tmp_user_V_reg_423_pp0_iter3_reg;
        tmp_user_V_reg_423_pp0_iter5_reg <= tmp_user_V_reg_423_pp0_iter4_reg;
        tmp_user_V_reg_423_pp0_iter6_reg <= tmp_user_V_reg_423_pp0_iter5_reg;
        tmp_user_V_reg_423_pp0_iter7_reg <= tmp_user_V_reg_423_pp0_iter6_reg;
        tmp_user_V_reg_423_pp0_iter8_reg <= tmp_user_V_reg_423_pp0_iter7_reg;
        tmp_user_V_reg_423_pp0_iter9_reg <= tmp_user_V_reg_423_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_A == 1'b1)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_B == 1'b1)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= val_V_fu_370_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= val_V_fu_370_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_438_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_438_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= tmp_id_V_reg_433_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= tmp_id_V_reg_433_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_413_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_413_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_reg_428_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_reg_428_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_418_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_418_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_reg_423_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_reg_423_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        tmp_5_reg_448 <= grp_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter20_reg == 1'd0))) begin
        tmp_6_reg_453 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter24_reg == 1'd0))) begin
        tmp_V_1_reg_464 <= tmp_V_1_fu_273_p1;
        tmp_V_reg_458 <= {{p_Val2_s_fu_259_p1[30:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_cast_reg_389[7 : 0] <= tmp_cast_fu_188_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dest_V_reg_438 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_433 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_413 <= inStream_V_keep_V_0_data_out;
        tmp_last_V_reg_428 <= inStream_V_last_V_0_data_out;
        tmp_strb_V_reg_418 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_423 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xMax_minus_xMin_reg_399 <= grp_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        xMax_read_reg_379 <= xMax;
        xMin_read_reg_384 <= xMin;
    end
end

always @ (*) begin
    if ((exitcond_fu_205_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state36))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_181_ce = 1'b1;
    end else begin
        grp_fu_181_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_185_ce = 1'b0;
    end else begin
        grp_fu_185_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_185_p0 = tmp_s_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_185_p0 = xMax_minus_xMin6_fu_200_p1;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_last_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_last_V_0_sel == 1'b1)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (exitcond_reg_404_pp0_iter26_reg == 1'd0) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_404_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_205_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_205_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_fu_205_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((exitcond_fu_205_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((exitcond_fu_205_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_io = ((exitcond_reg_404_pp0_iter25_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state34_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((exitcond_reg_404_pp0_iter26_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state35_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter0 = ((exitcond_fu_205_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_205_p2 = ((idxPixel_reg_165 == 17'd76800) ? 1'b1 : 1'b0);

assign idxPixel_1_fu_211_p2 = (idxPixel_reg_165 + 17'd1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'd1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_state_cmp_full & inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign isNeg_fu_299_p3 = sh_assign_fu_293_p2[32'd8];

assign mantissa_V_1_cast2_fu_286_p1 = mantissa_V_fu_277_p4;

assign mantissa_V_fu_277_p4 = {{{{1'd1}, {tmp_V_1_reg_464}}}, {1'd0}};

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign p_Val2_s_fu_259_p1 = grp_fu_176_p2;

assign r_V_1_fu_342_p2 = mantissa_V_1_cast2_fu_286_p1 << tmp_1_i_i_i_fu_332_p1;

assign r_V_fu_336_p2 = mantissa_V_fu_277_p4 >> sh_assign_2_cast_cas_fu_328_p1;

assign sh_assign_2_cast_cas_fu_328_p1 = ush_fu_316_p3;

assign sh_assign_2_cast_fu_324_p1 = ush_fu_316_p3;

assign sh_assign_fu_293_p2 = ($signed(9'd385) + $signed(tmp_i_i_i_i_cast1_fu_290_p1));

assign tmp_1_fu_194_p2 = (tmp_cast_6_fu_191_p1 - tmp_cast_fu_188_p1);

assign tmp_1_i_i_i_fu_332_p1 = $unsigned(sh_assign_2_cast_fu_324_p1);

assign tmp_3_cast_fu_245_p1 = inStream_V_data_V_0_data_out;

assign tmp_3_fu_360_p4 = {{r_V_1_fu_342_p2[31:24]}};

assign tmp_4_fu_249_p2 = (tmp_3_cast_fu_245_p1 - tmp_cast_reg_389);

assign tmp_9_fu_348_p3 = r_V_fu_336_p2[32'd24];

assign tmp_V_1_fu_273_p1 = p_Val2_s_fu_259_p1[22:0];

assign tmp_cast_6_fu_191_p1 = xMax_read_reg_379;

assign tmp_cast_fu_188_p1 = xMin_read_reg_384;

assign tmp_fu_356_p1 = tmp_9_fu_348_p3;

assign tmp_i_i_i_cast_fu_312_p1 = $signed(tmp_i_i_i_fu_307_p2);

assign tmp_i_i_i_fu_307_p2 = (8'd127 - tmp_V_reg_458);

assign tmp_i_i_i_i_cast1_fu_290_p1 = tmp_V_reg_458;

assign tmp_s_fu_254_p1 = $signed(tmp_4_fu_249_p2);

assign ush_fu_316_p3 = ((isNeg_fu_299_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_312_p1 : sh_assign_fu_293_p2);

assign val_V_fu_370_p3 = ((isNeg_fu_299_p3[0:0] === 1'b1) ? tmp_fu_356_p1 : tmp_3_fu_360_p4);

assign xMax_minus_xMin6_fu_200_p1 = $signed(tmp_1_fu_194_p2);

always @ (posedge ap_clk) begin
    tmp_cast_reg_389[8] <= 1'b0;
end

endmodule //doHistStrech
