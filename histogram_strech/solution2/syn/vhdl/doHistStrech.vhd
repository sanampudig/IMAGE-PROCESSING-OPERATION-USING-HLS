-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doHistStrech is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of doHistStrech is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doHistStrech,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.328000,HLS_SYN_LAT=76834,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=2130,HLS_SYN_LUT=3148,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_vld_in : STD_LOGIC;
    signal inStream_V_last_V_0_vld_out : STD_LOGIC;
    signal inStream_V_last_V_0_ack_in : STD_LOGIC;
    signal inStream_V_last_V_0_ack_out : STD_LOGIC;
    signal inStream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel : STD_LOGIC;
    signal inStream_V_last_V_0_load_A : STD_LOGIC;
    signal inStream_V_last_V_0_load_B : STD_LOGIC;
    signal inStream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal xMin : STD_LOGIC_VECTOR (7 downto 0);
    signal xMax : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal exitcond_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal exitcond_reg_404_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idxPixel_reg_165 : STD_LOGIC_VECTOR (16 downto 0);
    signal xMax_read_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal xMin_read_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_188_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_389 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xMax_minus_xMin6_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xMax_minus_xMin_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_404_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_404_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idxPixel_1_fu_211_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_keep_V_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_413_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_418_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_423 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_reg_423_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_428_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_433 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter18_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter19_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter20_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter21_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter22_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter23_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter24_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_reg_433_pp0_iter25_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_438 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_reg_438_pp0_iter25_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_458 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_464 : STD_LOGIC_VECTOR (22 downto 0);
    signal val_V_fu_370_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_6_fu_191_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_194_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_V_fu_277_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i_i_i_i_cast1_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_i_i_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_312_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_316_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_cast_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_2_cast_cas_fu_328_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mantissa_V_1_cast2_fu_286_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_1_i_i_i_fu_332_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_336_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_342_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_181_ce : STD_LOGIC;
    signal grp_fu_185_ce : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_state36 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component doHistStrech_fmulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doHistStrech_fdivcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doHistStrech_sitodEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doHistStrech_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        xMin : OUT STD_LOGIC_VECTOR (7 downto 0);
        xMax : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    doHistStrech_CRTL_BUS_s_axi_U : component doHistStrech_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        xMin => xMin,
        xMax => xMax);

    doHistStrech_fmulbkb_U1 : component doHistStrech_fmulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_reg_453,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    doHistStrech_fdivcud_U2 : component doHistStrech_fdivcud
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_5_reg_448,
        din1 => xMax_minus_xMin_reg_399,
        ce => grp_fu_181_ce,
        dout => grp_fu_181_p2);

    doHistStrech_sitodEe_U3 : component doHistStrech_sitodEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_185_p0,
        ce => grp_fu_185_ce,
        dout => grp_fu_185_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_out = ap_const_logic_1) and (inStream_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_rd <= not(inStream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_in = ap_const_logic_1) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_wr <= not(inStream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) and (inStream_V_last_V_0_state = ap_const_lv2_3)) or ((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    idxPixel_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idxPixel_reg_165 <= idxPixel_1_fu_211_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                idxPixel_reg_165 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_404 <= exitcond_fu_205_p2;
                exitcond_reg_404_pp0_iter1_reg <= exitcond_reg_404;
                tmp_dest_V_reg_438_pp0_iter1_reg <= tmp_dest_V_reg_438;
                tmp_id_V_reg_433_pp0_iter1_reg <= tmp_id_V_reg_433;
                tmp_keep_V_reg_413_pp0_iter1_reg <= tmp_keep_V_reg_413;
                tmp_last_V_reg_428_pp0_iter1_reg <= tmp_last_V_reg_428;
                tmp_strb_V_reg_418_pp0_iter1_reg <= tmp_strb_V_reg_418;
                tmp_user_V_reg_423_pp0_iter1_reg <= tmp_user_V_reg_423;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_404_pp0_iter10_reg <= exitcond_reg_404_pp0_iter9_reg;
                exitcond_reg_404_pp0_iter11_reg <= exitcond_reg_404_pp0_iter10_reg;
                exitcond_reg_404_pp0_iter12_reg <= exitcond_reg_404_pp0_iter11_reg;
                exitcond_reg_404_pp0_iter13_reg <= exitcond_reg_404_pp0_iter12_reg;
                exitcond_reg_404_pp0_iter14_reg <= exitcond_reg_404_pp0_iter13_reg;
                exitcond_reg_404_pp0_iter15_reg <= exitcond_reg_404_pp0_iter14_reg;
                exitcond_reg_404_pp0_iter16_reg <= exitcond_reg_404_pp0_iter15_reg;
                exitcond_reg_404_pp0_iter17_reg <= exitcond_reg_404_pp0_iter16_reg;
                exitcond_reg_404_pp0_iter18_reg <= exitcond_reg_404_pp0_iter17_reg;
                exitcond_reg_404_pp0_iter19_reg <= exitcond_reg_404_pp0_iter18_reg;
                exitcond_reg_404_pp0_iter20_reg <= exitcond_reg_404_pp0_iter19_reg;
                exitcond_reg_404_pp0_iter21_reg <= exitcond_reg_404_pp0_iter20_reg;
                exitcond_reg_404_pp0_iter22_reg <= exitcond_reg_404_pp0_iter21_reg;
                exitcond_reg_404_pp0_iter23_reg <= exitcond_reg_404_pp0_iter22_reg;
                exitcond_reg_404_pp0_iter24_reg <= exitcond_reg_404_pp0_iter23_reg;
                exitcond_reg_404_pp0_iter25_reg <= exitcond_reg_404_pp0_iter24_reg;
                exitcond_reg_404_pp0_iter26_reg <= exitcond_reg_404_pp0_iter25_reg;
                exitcond_reg_404_pp0_iter2_reg <= exitcond_reg_404_pp0_iter1_reg;
                exitcond_reg_404_pp0_iter3_reg <= exitcond_reg_404_pp0_iter2_reg;
                exitcond_reg_404_pp0_iter4_reg <= exitcond_reg_404_pp0_iter3_reg;
                exitcond_reg_404_pp0_iter5_reg <= exitcond_reg_404_pp0_iter4_reg;
                exitcond_reg_404_pp0_iter6_reg <= exitcond_reg_404_pp0_iter5_reg;
                exitcond_reg_404_pp0_iter7_reg <= exitcond_reg_404_pp0_iter6_reg;
                exitcond_reg_404_pp0_iter8_reg <= exitcond_reg_404_pp0_iter7_reg;
                exitcond_reg_404_pp0_iter9_reg <= exitcond_reg_404_pp0_iter8_reg;
                tmp_dest_V_reg_438_pp0_iter10_reg <= tmp_dest_V_reg_438_pp0_iter9_reg;
                tmp_dest_V_reg_438_pp0_iter11_reg <= tmp_dest_V_reg_438_pp0_iter10_reg;
                tmp_dest_V_reg_438_pp0_iter12_reg <= tmp_dest_V_reg_438_pp0_iter11_reg;
                tmp_dest_V_reg_438_pp0_iter13_reg <= tmp_dest_V_reg_438_pp0_iter12_reg;
                tmp_dest_V_reg_438_pp0_iter14_reg <= tmp_dest_V_reg_438_pp0_iter13_reg;
                tmp_dest_V_reg_438_pp0_iter15_reg <= tmp_dest_V_reg_438_pp0_iter14_reg;
                tmp_dest_V_reg_438_pp0_iter16_reg <= tmp_dest_V_reg_438_pp0_iter15_reg;
                tmp_dest_V_reg_438_pp0_iter17_reg <= tmp_dest_V_reg_438_pp0_iter16_reg;
                tmp_dest_V_reg_438_pp0_iter18_reg <= tmp_dest_V_reg_438_pp0_iter17_reg;
                tmp_dest_V_reg_438_pp0_iter19_reg <= tmp_dest_V_reg_438_pp0_iter18_reg;
                tmp_dest_V_reg_438_pp0_iter20_reg <= tmp_dest_V_reg_438_pp0_iter19_reg;
                tmp_dest_V_reg_438_pp0_iter21_reg <= tmp_dest_V_reg_438_pp0_iter20_reg;
                tmp_dest_V_reg_438_pp0_iter22_reg <= tmp_dest_V_reg_438_pp0_iter21_reg;
                tmp_dest_V_reg_438_pp0_iter23_reg <= tmp_dest_V_reg_438_pp0_iter22_reg;
                tmp_dest_V_reg_438_pp0_iter24_reg <= tmp_dest_V_reg_438_pp0_iter23_reg;
                tmp_dest_V_reg_438_pp0_iter25_reg <= tmp_dest_V_reg_438_pp0_iter24_reg;
                tmp_dest_V_reg_438_pp0_iter2_reg <= tmp_dest_V_reg_438_pp0_iter1_reg;
                tmp_dest_V_reg_438_pp0_iter3_reg <= tmp_dest_V_reg_438_pp0_iter2_reg;
                tmp_dest_V_reg_438_pp0_iter4_reg <= tmp_dest_V_reg_438_pp0_iter3_reg;
                tmp_dest_V_reg_438_pp0_iter5_reg <= tmp_dest_V_reg_438_pp0_iter4_reg;
                tmp_dest_V_reg_438_pp0_iter6_reg <= tmp_dest_V_reg_438_pp0_iter5_reg;
                tmp_dest_V_reg_438_pp0_iter7_reg <= tmp_dest_V_reg_438_pp0_iter6_reg;
                tmp_dest_V_reg_438_pp0_iter8_reg <= tmp_dest_V_reg_438_pp0_iter7_reg;
                tmp_dest_V_reg_438_pp0_iter9_reg <= tmp_dest_V_reg_438_pp0_iter8_reg;
                tmp_id_V_reg_433_pp0_iter10_reg <= tmp_id_V_reg_433_pp0_iter9_reg;
                tmp_id_V_reg_433_pp0_iter11_reg <= tmp_id_V_reg_433_pp0_iter10_reg;
                tmp_id_V_reg_433_pp0_iter12_reg <= tmp_id_V_reg_433_pp0_iter11_reg;
                tmp_id_V_reg_433_pp0_iter13_reg <= tmp_id_V_reg_433_pp0_iter12_reg;
                tmp_id_V_reg_433_pp0_iter14_reg <= tmp_id_V_reg_433_pp0_iter13_reg;
                tmp_id_V_reg_433_pp0_iter15_reg <= tmp_id_V_reg_433_pp0_iter14_reg;
                tmp_id_V_reg_433_pp0_iter16_reg <= tmp_id_V_reg_433_pp0_iter15_reg;
                tmp_id_V_reg_433_pp0_iter17_reg <= tmp_id_V_reg_433_pp0_iter16_reg;
                tmp_id_V_reg_433_pp0_iter18_reg <= tmp_id_V_reg_433_pp0_iter17_reg;
                tmp_id_V_reg_433_pp0_iter19_reg <= tmp_id_V_reg_433_pp0_iter18_reg;
                tmp_id_V_reg_433_pp0_iter20_reg <= tmp_id_V_reg_433_pp0_iter19_reg;
                tmp_id_V_reg_433_pp0_iter21_reg <= tmp_id_V_reg_433_pp0_iter20_reg;
                tmp_id_V_reg_433_pp0_iter22_reg <= tmp_id_V_reg_433_pp0_iter21_reg;
                tmp_id_V_reg_433_pp0_iter23_reg <= tmp_id_V_reg_433_pp0_iter22_reg;
                tmp_id_V_reg_433_pp0_iter24_reg <= tmp_id_V_reg_433_pp0_iter23_reg;
                tmp_id_V_reg_433_pp0_iter25_reg <= tmp_id_V_reg_433_pp0_iter24_reg;
                tmp_id_V_reg_433_pp0_iter2_reg <= tmp_id_V_reg_433_pp0_iter1_reg;
                tmp_id_V_reg_433_pp0_iter3_reg <= tmp_id_V_reg_433_pp0_iter2_reg;
                tmp_id_V_reg_433_pp0_iter4_reg <= tmp_id_V_reg_433_pp0_iter3_reg;
                tmp_id_V_reg_433_pp0_iter5_reg <= tmp_id_V_reg_433_pp0_iter4_reg;
                tmp_id_V_reg_433_pp0_iter6_reg <= tmp_id_V_reg_433_pp0_iter5_reg;
                tmp_id_V_reg_433_pp0_iter7_reg <= tmp_id_V_reg_433_pp0_iter6_reg;
                tmp_id_V_reg_433_pp0_iter8_reg <= tmp_id_V_reg_433_pp0_iter7_reg;
                tmp_id_V_reg_433_pp0_iter9_reg <= tmp_id_V_reg_433_pp0_iter8_reg;
                tmp_keep_V_reg_413_pp0_iter10_reg <= tmp_keep_V_reg_413_pp0_iter9_reg;
                tmp_keep_V_reg_413_pp0_iter11_reg <= tmp_keep_V_reg_413_pp0_iter10_reg;
                tmp_keep_V_reg_413_pp0_iter12_reg <= tmp_keep_V_reg_413_pp0_iter11_reg;
                tmp_keep_V_reg_413_pp0_iter13_reg <= tmp_keep_V_reg_413_pp0_iter12_reg;
                tmp_keep_V_reg_413_pp0_iter14_reg <= tmp_keep_V_reg_413_pp0_iter13_reg;
                tmp_keep_V_reg_413_pp0_iter15_reg <= tmp_keep_V_reg_413_pp0_iter14_reg;
                tmp_keep_V_reg_413_pp0_iter16_reg <= tmp_keep_V_reg_413_pp0_iter15_reg;
                tmp_keep_V_reg_413_pp0_iter17_reg <= tmp_keep_V_reg_413_pp0_iter16_reg;
                tmp_keep_V_reg_413_pp0_iter18_reg <= tmp_keep_V_reg_413_pp0_iter17_reg;
                tmp_keep_V_reg_413_pp0_iter19_reg <= tmp_keep_V_reg_413_pp0_iter18_reg;
                tmp_keep_V_reg_413_pp0_iter20_reg <= tmp_keep_V_reg_413_pp0_iter19_reg;
                tmp_keep_V_reg_413_pp0_iter21_reg <= tmp_keep_V_reg_413_pp0_iter20_reg;
                tmp_keep_V_reg_413_pp0_iter22_reg <= tmp_keep_V_reg_413_pp0_iter21_reg;
                tmp_keep_V_reg_413_pp0_iter23_reg <= tmp_keep_V_reg_413_pp0_iter22_reg;
                tmp_keep_V_reg_413_pp0_iter24_reg <= tmp_keep_V_reg_413_pp0_iter23_reg;
                tmp_keep_V_reg_413_pp0_iter25_reg <= tmp_keep_V_reg_413_pp0_iter24_reg;
                tmp_keep_V_reg_413_pp0_iter2_reg <= tmp_keep_V_reg_413_pp0_iter1_reg;
                tmp_keep_V_reg_413_pp0_iter3_reg <= tmp_keep_V_reg_413_pp0_iter2_reg;
                tmp_keep_V_reg_413_pp0_iter4_reg <= tmp_keep_V_reg_413_pp0_iter3_reg;
                tmp_keep_V_reg_413_pp0_iter5_reg <= tmp_keep_V_reg_413_pp0_iter4_reg;
                tmp_keep_V_reg_413_pp0_iter6_reg <= tmp_keep_V_reg_413_pp0_iter5_reg;
                tmp_keep_V_reg_413_pp0_iter7_reg <= tmp_keep_V_reg_413_pp0_iter6_reg;
                tmp_keep_V_reg_413_pp0_iter8_reg <= tmp_keep_V_reg_413_pp0_iter7_reg;
                tmp_keep_V_reg_413_pp0_iter9_reg <= tmp_keep_V_reg_413_pp0_iter8_reg;
                tmp_last_V_reg_428_pp0_iter10_reg <= tmp_last_V_reg_428_pp0_iter9_reg;
                tmp_last_V_reg_428_pp0_iter11_reg <= tmp_last_V_reg_428_pp0_iter10_reg;
                tmp_last_V_reg_428_pp0_iter12_reg <= tmp_last_V_reg_428_pp0_iter11_reg;
                tmp_last_V_reg_428_pp0_iter13_reg <= tmp_last_V_reg_428_pp0_iter12_reg;
                tmp_last_V_reg_428_pp0_iter14_reg <= tmp_last_V_reg_428_pp0_iter13_reg;
                tmp_last_V_reg_428_pp0_iter15_reg <= tmp_last_V_reg_428_pp0_iter14_reg;
                tmp_last_V_reg_428_pp0_iter16_reg <= tmp_last_V_reg_428_pp0_iter15_reg;
                tmp_last_V_reg_428_pp0_iter17_reg <= tmp_last_V_reg_428_pp0_iter16_reg;
                tmp_last_V_reg_428_pp0_iter18_reg <= tmp_last_V_reg_428_pp0_iter17_reg;
                tmp_last_V_reg_428_pp0_iter19_reg <= tmp_last_V_reg_428_pp0_iter18_reg;
                tmp_last_V_reg_428_pp0_iter20_reg <= tmp_last_V_reg_428_pp0_iter19_reg;
                tmp_last_V_reg_428_pp0_iter21_reg <= tmp_last_V_reg_428_pp0_iter20_reg;
                tmp_last_V_reg_428_pp0_iter22_reg <= tmp_last_V_reg_428_pp0_iter21_reg;
                tmp_last_V_reg_428_pp0_iter23_reg <= tmp_last_V_reg_428_pp0_iter22_reg;
                tmp_last_V_reg_428_pp0_iter24_reg <= tmp_last_V_reg_428_pp0_iter23_reg;
                tmp_last_V_reg_428_pp0_iter25_reg <= tmp_last_V_reg_428_pp0_iter24_reg;
                tmp_last_V_reg_428_pp0_iter2_reg <= tmp_last_V_reg_428_pp0_iter1_reg;
                tmp_last_V_reg_428_pp0_iter3_reg <= tmp_last_V_reg_428_pp0_iter2_reg;
                tmp_last_V_reg_428_pp0_iter4_reg <= tmp_last_V_reg_428_pp0_iter3_reg;
                tmp_last_V_reg_428_pp0_iter5_reg <= tmp_last_V_reg_428_pp0_iter4_reg;
                tmp_last_V_reg_428_pp0_iter6_reg <= tmp_last_V_reg_428_pp0_iter5_reg;
                tmp_last_V_reg_428_pp0_iter7_reg <= tmp_last_V_reg_428_pp0_iter6_reg;
                tmp_last_V_reg_428_pp0_iter8_reg <= tmp_last_V_reg_428_pp0_iter7_reg;
                tmp_last_V_reg_428_pp0_iter9_reg <= tmp_last_V_reg_428_pp0_iter8_reg;
                tmp_strb_V_reg_418_pp0_iter10_reg <= tmp_strb_V_reg_418_pp0_iter9_reg;
                tmp_strb_V_reg_418_pp0_iter11_reg <= tmp_strb_V_reg_418_pp0_iter10_reg;
                tmp_strb_V_reg_418_pp0_iter12_reg <= tmp_strb_V_reg_418_pp0_iter11_reg;
                tmp_strb_V_reg_418_pp0_iter13_reg <= tmp_strb_V_reg_418_pp0_iter12_reg;
                tmp_strb_V_reg_418_pp0_iter14_reg <= tmp_strb_V_reg_418_pp0_iter13_reg;
                tmp_strb_V_reg_418_pp0_iter15_reg <= tmp_strb_V_reg_418_pp0_iter14_reg;
                tmp_strb_V_reg_418_pp0_iter16_reg <= tmp_strb_V_reg_418_pp0_iter15_reg;
                tmp_strb_V_reg_418_pp0_iter17_reg <= tmp_strb_V_reg_418_pp0_iter16_reg;
                tmp_strb_V_reg_418_pp0_iter18_reg <= tmp_strb_V_reg_418_pp0_iter17_reg;
                tmp_strb_V_reg_418_pp0_iter19_reg <= tmp_strb_V_reg_418_pp0_iter18_reg;
                tmp_strb_V_reg_418_pp0_iter20_reg <= tmp_strb_V_reg_418_pp0_iter19_reg;
                tmp_strb_V_reg_418_pp0_iter21_reg <= tmp_strb_V_reg_418_pp0_iter20_reg;
                tmp_strb_V_reg_418_pp0_iter22_reg <= tmp_strb_V_reg_418_pp0_iter21_reg;
                tmp_strb_V_reg_418_pp0_iter23_reg <= tmp_strb_V_reg_418_pp0_iter22_reg;
                tmp_strb_V_reg_418_pp0_iter24_reg <= tmp_strb_V_reg_418_pp0_iter23_reg;
                tmp_strb_V_reg_418_pp0_iter25_reg <= tmp_strb_V_reg_418_pp0_iter24_reg;
                tmp_strb_V_reg_418_pp0_iter2_reg <= tmp_strb_V_reg_418_pp0_iter1_reg;
                tmp_strb_V_reg_418_pp0_iter3_reg <= tmp_strb_V_reg_418_pp0_iter2_reg;
                tmp_strb_V_reg_418_pp0_iter4_reg <= tmp_strb_V_reg_418_pp0_iter3_reg;
                tmp_strb_V_reg_418_pp0_iter5_reg <= tmp_strb_V_reg_418_pp0_iter4_reg;
                tmp_strb_V_reg_418_pp0_iter6_reg <= tmp_strb_V_reg_418_pp0_iter5_reg;
                tmp_strb_V_reg_418_pp0_iter7_reg <= tmp_strb_V_reg_418_pp0_iter6_reg;
                tmp_strb_V_reg_418_pp0_iter8_reg <= tmp_strb_V_reg_418_pp0_iter7_reg;
                tmp_strb_V_reg_418_pp0_iter9_reg <= tmp_strb_V_reg_418_pp0_iter8_reg;
                tmp_user_V_reg_423_pp0_iter10_reg <= tmp_user_V_reg_423_pp0_iter9_reg;
                tmp_user_V_reg_423_pp0_iter11_reg <= tmp_user_V_reg_423_pp0_iter10_reg;
                tmp_user_V_reg_423_pp0_iter12_reg <= tmp_user_V_reg_423_pp0_iter11_reg;
                tmp_user_V_reg_423_pp0_iter13_reg <= tmp_user_V_reg_423_pp0_iter12_reg;
                tmp_user_V_reg_423_pp0_iter14_reg <= tmp_user_V_reg_423_pp0_iter13_reg;
                tmp_user_V_reg_423_pp0_iter15_reg <= tmp_user_V_reg_423_pp0_iter14_reg;
                tmp_user_V_reg_423_pp0_iter16_reg <= tmp_user_V_reg_423_pp0_iter15_reg;
                tmp_user_V_reg_423_pp0_iter17_reg <= tmp_user_V_reg_423_pp0_iter16_reg;
                tmp_user_V_reg_423_pp0_iter18_reg <= tmp_user_V_reg_423_pp0_iter17_reg;
                tmp_user_V_reg_423_pp0_iter19_reg <= tmp_user_V_reg_423_pp0_iter18_reg;
                tmp_user_V_reg_423_pp0_iter20_reg <= tmp_user_V_reg_423_pp0_iter19_reg;
                tmp_user_V_reg_423_pp0_iter21_reg <= tmp_user_V_reg_423_pp0_iter20_reg;
                tmp_user_V_reg_423_pp0_iter22_reg <= tmp_user_V_reg_423_pp0_iter21_reg;
                tmp_user_V_reg_423_pp0_iter23_reg <= tmp_user_V_reg_423_pp0_iter22_reg;
                tmp_user_V_reg_423_pp0_iter24_reg <= tmp_user_V_reg_423_pp0_iter23_reg;
                tmp_user_V_reg_423_pp0_iter25_reg <= tmp_user_V_reg_423_pp0_iter24_reg;
                tmp_user_V_reg_423_pp0_iter2_reg <= tmp_user_V_reg_423_pp0_iter1_reg;
                tmp_user_V_reg_423_pp0_iter3_reg <= tmp_user_V_reg_423_pp0_iter2_reg;
                tmp_user_V_reg_423_pp0_iter4_reg <= tmp_user_V_reg_423_pp0_iter3_reg;
                tmp_user_V_reg_423_pp0_iter5_reg <= tmp_user_V_reg_423_pp0_iter4_reg;
                tmp_user_V_reg_423_pp0_iter6_reg <= tmp_user_V_reg_423_pp0_iter5_reg;
                tmp_user_V_reg_423_pp0_iter7_reg <= tmp_user_V_reg_423_pp0_iter6_reg;
                tmp_user_V_reg_423_pp0_iter8_reg <= tmp_user_V_reg_423_pp0_iter7_reg;
                tmp_user_V_reg_423_pp0_iter9_reg <= tmp_user_V_reg_423_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_A = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_A <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_B = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_B <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= val_V_fu_370_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= val_V_fu_370_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_438_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_438_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= tmp_id_V_reg_433_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= tmp_id_V_reg_433_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_413_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_413_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= tmp_last_V_reg_428_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= tmp_last_V_reg_428_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_418_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_418_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= tmp_user_V_reg_423_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= tmp_user_V_reg_423_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                tmp_5_reg_448 <= grp_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter20_reg = ap_const_lv1_0))) then
                tmp_6_reg_453 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter24_reg = ap_const_lv1_0))) then
                tmp_V_1_reg_464 <= tmp_V_1_fu_273_p1;
                tmp_V_reg_458 <= p_Val2_s_fu_259_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_cast_reg_389(7 downto 0) <= tmp_cast_fu_188_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_dest_V_reg_438 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_reg_433 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_reg_413 <= inStream_V_keep_V_0_data_out;
                tmp_last_V_reg_428 <= inStream_V_last_V_0_data_out;
                tmp_strb_V_reg_418 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_reg_423 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xMax_minus_xMin_reg_399 <= grp_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                xMax_read_reg_379 <= xMax;
                xMin_read_reg_384 <= xMin;
            end if;
        end if;
    end process;
    tmp_cast_reg_389(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_V_data_V_1_ack_in, outStream_V_data_V_1_state, outStream_V_keep_V_1_ack_in, outStream_V_keep_V_1_state, outStream_V_strb_V_1_ack_in, outStream_V_strb_V_1_state, outStream_V_user_V_1_ack_in, outStream_V_user_V_1_state, outStream_V_last_V_1_ack_in, outStream_V_last_V_1_state, outStream_V_id_V_1_ack_in, outStream_V_id_V_1_state, outStream_V_dest_V_1_ack_in, outStream_V_dest_V_1_state, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_205_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (outStream_V_dest_V_1_state(0) = ap_const_logic_0) and (outStream_V_id_V_1_state(0) = ap_const_logic_0) and (outStream_V_last_V_1_state(0) = ap_const_logic_0) and (outStream_V_user_V_1_state(0) = ap_const_logic_0) and (outStream_V_strb_V_1_state(0) = ap_const_logic_0) and (outStream_V_keep_V_1_state(0) = ap_const_logic_0) and (outStream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state36 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStream_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_fu_205_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStream_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_state34_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((exitcond_fu_205_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStream_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_state34_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((exitcond_fu_205_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond_reg_404_pp0_iter25_reg)
    begin
                ap_block_state34_io <= ((exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state34_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond_reg_404_pp0_iter26_reg)
    begin
                ap_block_state35_io <= ((exitcond_reg_404_pp0_iter26_reg = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state35_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state36 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage0_iter0_assign_proc : process(inStream_V_data_V_0_vld_out, exitcond_fu_205_p2)
    begin
                ap_block_state8_pp0_stage0_iter0 <= ((exitcond_fu_205_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond_fu_205_p2)
    begin
        if ((exitcond_fu_205_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_data_V_1_state, outStream_V_keep_V_1_ack_in, outStream_V_keep_V_1_state, outStream_V_strb_V_1_ack_in, outStream_V_strb_V_1_state, outStream_V_user_V_1_ack_in, outStream_V_user_V_1_state, outStream_V_last_V_1_ack_in, outStream_V_last_V_1_state, outStream_V_id_V_1_ack_in, outStream_V_id_V_1_state, outStream_V_dest_V_1_ack_in, outStream_V_dest_V_1_state, ap_CS_fsm_state36)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (outStream_V_dest_V_1_state(0) = ap_const_logic_0) and (outStream_V_id_V_1_state(0) = ap_const_logic_0) and (outStream_V_last_V_1_state(0) = ap_const_logic_0) and (outStream_V_user_V_1_state(0) = ap_const_logic_0) and (outStream_V_strb_V_1_state(0) = ap_const_logic_0) and (outStream_V_keep_V_1_state(0) = ap_const_logic_0) and (outStream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_data_V_1_state, outStream_V_keep_V_1_ack_in, outStream_V_keep_V_1_state, outStream_V_strb_V_1_ack_in, outStream_V_strb_V_1_state, outStream_V_user_V_1_ack_in, outStream_V_user_V_1_state, outStream_V_last_V_1_ack_in, outStream_V_last_V_1_state, outStream_V_id_V_1_ack_in, outStream_V_id_V_1_state, outStream_V_dest_V_1_ack_in, outStream_V_dest_V_1_state, ap_CS_fsm_state36)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (outStream_V_dest_V_1_state(0) = ap_const_logic_0) and (outStream_V_id_V_1_state(0) = ap_const_logic_0) and (outStream_V_last_V_1_state(0) = ap_const_logic_0) and (outStream_V_user_V_1_state(0) = ap_const_logic_0) and (outStream_V_strb_V_1_state(0) = ap_const_logic_0) and (outStream_V_keep_V_1_state(0) = ap_const_logic_0) and (outStream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_205_p2 <= "1" when (idxPixel_reg_165 = ap_const_lv17_12C00) else "0";

    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_181_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_181_ce <= ap_const_logic_1;
        else 
            grp_fu_181_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_185_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_boolean_1 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_185_ce <= ap_const_logic_0;
        else 
            grp_fu_185_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_185_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_state2, xMax_minus_xMin6_fu_200_p1, tmp_s_fu_254_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_185_p0 <= tmp_s_fu_254_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_185_p0 <= xMax_minus_xMin6_fu_200_p1;
        else 
            grp_fu_185_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    idxPixel_1_fu_211_p2 <= std_logic_vector(unsigned(idxPixel_reg_165) + unsigned(ap_const_lv17_1));

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, exitcond_fu_205_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_last_V_0_ack_in <= inStream_V_last_V_0_state(1);

    inStream_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_last_V_0_data_out_assign_proc : process(inStream_V_last_V_0_payload_A, inStream_V_last_V_0_payload_B, inStream_V_last_V_0_sel)
    begin
        if ((inStream_V_last_V_0_sel = ap_const_logic_1)) then 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_B;
        else 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_A;
        end if; 
    end process;

    inStream_V_last_V_0_load_A <= (inStream_V_last_V_0_state_cmp_full and not(inStream_V_last_V_0_sel_wr));
    inStream_V_last_V_0_load_B <= (inStream_V_last_V_0_state_cmp_full and inStream_V_last_V_0_sel_wr);
    inStream_V_last_V_0_sel <= inStream_V_last_V_0_sel_rd;
    inStream_V_last_V_0_state_cmp_full <= '0' when (inStream_V_last_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_last_V_0_vld_in <= inStream_TVALID;
    inStream_V_last_V_0_vld_out <= inStream_V_last_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_205_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_205_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    isNeg_fu_299_p3 <= sh_assign_fu_293_p2(8 downto 8);
    mantissa_V_1_cast2_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_277_p4),55));
    mantissa_V_fu_277_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_464) & ap_const_lv1_0);
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_enable_reg_pp0_iter27, exitcond_reg_404_pp0_iter26_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_404_pp0_iter26_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, exitcond_reg_404_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_404_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    p_Val2_s_fu_259_p1 <= grp_fu_176_p2;
    r_V_1_fu_342_p2 <= std_logic_vector(shift_left(unsigned(mantissa_V_1_cast2_fu_286_p1),to_integer(unsigned('0' & tmp_1_i_i_i_fu_332_p1(31-1 downto 0)))));
    r_V_fu_336_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_277_p4),to_integer(unsigned('0' & sh_assign_2_cast_cas_fu_328_p1(25-1 downto 0)))));
        sh_assign_2_cast_cas_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_316_p3),25));

        sh_assign_2_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_316_p3),32));

    sh_assign_fu_293_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast1_fu_290_p1));
    tmp_1_fu_194_p2 <= std_logic_vector(unsigned(tmp_cast_6_fu_191_p1) - unsigned(tmp_cast_fu_188_p1));
    tmp_1_i_i_i_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_cast_fu_324_p1),55));
    tmp_3_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inStream_V_data_V_0_data_out),9));
    tmp_3_fu_360_p4 <= r_V_1_fu_342_p2(31 downto 24);
    tmp_4_fu_249_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_245_p1) - unsigned(tmp_cast_reg_389));
    tmp_9_fu_348_p3 <= r_V_fu_336_p2(24 downto 24);
    tmp_V_1_fu_273_p1 <= p_Val2_s_fu_259_p1(23 - 1 downto 0);
    tmp_cast_6_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xMax_read_reg_379),9));
    tmp_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xMin_read_reg_384),9));
    tmp_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_348_p3),8));
        tmp_i_i_i_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_i_i_fu_307_p2),9));

    tmp_i_i_i_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_reg_458));
    tmp_i_i_i_i_cast1_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_458),9));
        tmp_s_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_249_p2),32));

    ush_fu_316_p3 <= 
        tmp_i_i_i_cast_fu_312_p1 when (isNeg_fu_299_p3(0) = '1') else 
        sh_assign_fu_293_p2;
    val_V_fu_370_p3 <= 
        tmp_fu_356_p1 when (isNeg_fu_299_p3(0) = '1') else 
        tmp_3_fu_360_p4;
        xMax_minus_xMin6_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_194_p2),32));

end behav;
